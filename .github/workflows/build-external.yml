name: Build External Packages

on:
  push:
    branches:
      - main
    paths-ignore:
      - ".github/workflows/**"
      - '**.md'
      - '.gitignore'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to build (e.g. indi, kstars-bleeding)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Keep explicit path filters (good for caching, clear triggers)
    - name: Filter changed packages
      uses: dorny/paths-filter@v3
      id: package-change
      with:
        filters: |
          indi:
            - 'packages/indi/**'
          kstars-bleeding:
            - 'packages/kstars-bleeding/**'

    # Consolidated detection and verification - uses toJSON() for dynamic parsing
    - name: Detect and verify package
      id: detect
      env:
        # GitHub Actions magic: converts all filter outputs to JSON automatically
        FILTER_OUTPUTS: ${{ toJSON(steps.package-change.outputs) }}
        MANUAL_PACKAGE: ${{ github.event.inputs.package }}
        EVENT_NAME: ${{ github.event_name }}
      run: |
        set -e

        PACKAGE_TO_BUILD=""

        if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
          # Manual trigger
          echo "Manual trigger: building '$MANUAL_PACKAGE'"
          PACKAGE_TO_BUILD="$MANUAL_PACKAGE"

          # Validate package exists
          if [ ! -d "packages/$PACKAGE_TO_BUILD" ]; then
            echo "‚ùå ERROR: Package 'packages/$PACKAGE_TO_BUILD' does not exist"
            echo ""
            echo "Available packages:"
            ls -1 packages/ | grep -v '^\.'
            exit 1
          fi

        else
          # Auto-detect from changed files using JSON parsing
          echo "Auto-detecting changed packages from filter outputs..."

          # Parse JSON to extract package names where value is "true"
          # This automatically works for any packages defined in the filters!
          CHANGED_PACKAGES=$(echo "$FILTER_OUTPUTS" | jq -r 'to_entries | map(select(.value == "true")) | .[].key')

          # Convert to bash array
          readarray -t PACKAGES <<< "$CHANGED_PACKAGES"

          # Remove empty elements
          PACKAGES=("${PACKAGES[@]}")

          echo "Detected ${#PACKAGES[@]} changed package(s)"

          # Verify single package per commit
          if [ ${#PACKAGES[@]} -gt 1 ]; then
            echo "‚ùå ERROR: Multiple packages changed in one commit"
            echo ""
            echo "Only one package per commit is supported for isolated deployment tracking."
            echo "This ensures each package's build and deployment can be tracked independently."
            echo ""
            echo "Changed packages detected:"
            for pkg in "${PACKAGES[@]}"; do
              echo "  - $pkg"
            done
            echo ""
            echo "Please split your changes into separate commits, one per package."
            exit 1
          fi

          if [ ${#PACKAGES[@]} -eq 0 ]; then
            echo "‚ÑπÔ∏è  No package changes detected, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          PACKAGE_TO_BUILD="${PACKAGES[0]}"
          echo "‚úÖ Single package change detected: $PACKAGE_TO_BUILD"
        fi

        # Export for next steps
        echo "package=$PACKAGE_TO_BUILD" >> $GITHUB_OUTPUT
        echo "should_build=true" >> $GITHUB_OUTPUT
        echo ""
        echo "Will build: $PACKAGE_TO_BUILD"

    - name: Set up QEMU
      if: steps.detect.outputs.should_build == 'true'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    # Single consolidated build step - no more duplication!
    - name: Build package
      if: steps.detect.outputs.should_build == 'true'
      env:
        PACKAGE: ${{ steps.detect.outputs.package }}
      run: |
        echo "Building package: $PACKAGE"
        docker run --rm --platform linux/arm64 \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          debian:trixie-slim \
          bash -c '
            set -e
            export DEBIAN_FRONTEND=noninteractive
            export BUILD_DIR=/workspace/build
            export OUTPUT_DIR=/workspace/build/output

            echo "Adding Astroberry64 APT repository..."
            echo "deb [trusted=yes] https://astroberry64.github.io/astroberry64-repo/ trixie-testing main" > /etc/apt/sources.list.d/astroberry64.list

            echo "Installing base build tools..."
            apt-get update
            apt-get install -y debhelper devscripts cdbs cmake build-essential git curl jq

            echo "Building '"$PACKAGE"'..."
            ./scripts/build-package.sh '"$PACKAGE"'

            echo ""
            echo "Build artifacts:"
            ls -lh /workspace/build/output/
          '

    - name: Upload package artifacts
      if: success() && steps.detect.outputs.should_build == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: build/output/*.deb
        if-no-files-found: warn

    - name: Upload build info
      if: success() && steps.detect.outputs.should_build == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: |
          build/output/*.buildinfo
          build/output/*.changes
        if-no-files-found: warn

    - name: Auto-deploy to testing suite
      if: |
        steps.detect.outputs.should_build == 'true' &&
        ((github.event_name == 'push' && github.ref == 'refs/heads/main') ||
         github.event_name == 'workflow_dispatch')
      env:
        GH_TOKEN: ${{ secrets.ASTROBERRY64_REPO_TOKEN }}
      run: |
        # Only proceed if we have .deb files
        if ! ls build/output/*.deb 1> /dev/null 2>&1; then
          echo "No .deb files found, skipping deployment"
          exit 0
        fi

        # Clone the repo with token authentication
        git clone https://x-access-token:${GH_TOKEN}@github.com/astroberry64/astroberry64-repo.git /tmp/repo
        cd /tmp/repo

        # Configure git
        git config user.name "Astroberry64 Bot"
        git config user.email "bot@astroberry64.github.io"

        # Add all packages to the testing suite (hardcoded)
        for deb in ${{ github.workspace }}/build/output/*.deb; do
          if [ -f "$deb" ]; then
            echo "Adding $(basename $deb) to testing suite..."
            ./add-package.sh "$deb" "testing"
          fi
        done

        # Commit and push
        git add dists/trixie-testing pool
        git commit -m "Auto-add external packages to testing suite"$'\n\n'"Built from ${{ github.repository }}@${{ github.sha }}"$'\n\n'"ü§ñ Automated build via GitHub Actions" || echo "No changes to commit"
        git push origin main || echo "Nothing to push"
